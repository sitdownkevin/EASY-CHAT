import {
  Affix_default,
  Alert_default,
  AnchorAdapter_default,
  AutoComplete_default,
  AvatarGroup_default,
  Avatar_default,
  BackTop_default,
  Badge_default,
  BreadcrumbItem_default,
  Breadcrumb_default,
  ButtonGroup_default,
  Button_default,
  Calendar_default,
  Card_default,
  CarouselItem_default,
  Carousel_default,
  Cascader_default,
  CheckboxGroup_default,
  Checkbox_default,
  Code_default,
  Col_default,
  CollapseItem_default,
  CollapseTransition_default,
  Collapse_default,
  ColorPicker_default,
  ConfigProvider_default,
  Countdown_default,
  DataTable_default,
  DatePicker_default,
  DescriptionsItem_default,
  Descriptions_default,
  Divider_default,
  DrawerContent_default,
  Drawer_default,
  Dropdown_default,
  DynamicInput_default,
  DynamicTags_default,
  Element_default,
  Ellipsis_default,
  Empty_default,
  Equation,
  FormItemCol_default,
  FormItemGridItem_default,
  FormItemRow_default,
  FormItem_default,
  Form_default,
  GlobalStyle_default,
  GradientText_default,
  GridItem_default,
  Grid_default,
  ImageGroup_default,
  Image_default,
  InputGroupLabel_default,
  InputGroup_default,
  InputNumber_default,
  Input_default,
  LayoutContent_default,
  LayoutFooter_default,
  LayoutHeader_default,
  LayoutSider_default,
  Layout_default,
  Link_default,
  ListItem_default,
  List_default,
  LoadingBarProvider_default,
  Log_default,
  Mention_default,
  Menu_default,
  MessageProvider_default,
  Modal_default,
  NDialog,
  NDialogProvider,
  NH1,
  NH2,
  NH3,
  NH4,
  NH5,
  NH6,
  NIcon,
  NIconWrapper,
  NotificationProvider_default,
  NumberAnimation_default,
  PageHeader_default,
  Pagination_default,
  Popconfirm_default,
  Popover_default,
  Popselect_default,
  Progress_default,
  RadioButton_default,
  RadioGroup_default,
  Radio_default,
  Rate_default,
  Result_default,
  Row_default,
  Scrollbar_default,
  Select_default,
  Skeleton_default,
  Slider_default,
  Space_default,
  Spin_default,
  Statistic_default,
  Step_default,
  Steps_default,
  Switch_default,
  TabPane_default,
  Tab_default,
  Table_default,
  Tabs_default,
  Tag_default,
  Tbody_default,
  Td_default,
  Th_default,
  Thead_default,
  Thing_default,
  TimePicker_default,
  Time_default,
  TimelineItem_default,
  Timeline_default,
  Tooltip_default,
  Tr_default,
  Transfer_default,
  Transfer_default2,
  TreeSelect_default,
  Tree_default,
  UploadDragger_default,
  UploadFileList_default,
  UploadTrigger_default,
  Upload_default,
  Watermark_default,
  XButton,
  aProps,
  a_default,
  affixProps,
  alertProps,
  alertRtl,
  anchorLinkProps,
  anchorProps,
  arDZ_default,
  arDZ_default2,
  autoCompleteProps,
  avatarGroupProps,
  avatarGroupRtl,
  avatarProps,
  backTopProps,
  badgeProps,
  badgeRtl,
  blockquoteProps,
  blockquote_default,
  breadcrumbItemProps,
  breadcrumbProps,
  buttonGroupProps,
  buttonGroupRtl,
  buttonProps,
  buttonRtl,
  c,
  cB,
  cE,
  cM,
  cNotM,
  calendarProps,
  cardProps,
  cardRtl,
  carouselProps,
  cascaderProps,
  checkboxGroupProps,
  checkboxProps,
  checkboxRtl,
  cloneDeep_default,
  codeProps,
  colProps,
  collapseItemProps,
  collapseProps,
  collapseRtl,
  collapseTransitionProps,
  collapseTransitionRtl,
  colorPickerProps,
  configProviderInjectionKey,
  configProviderProps,
  countdownProps,
  createDiscreteApi,
  createLocale,
  create_default,
  dark_default,
  dark_default10,
  dark_default11,
  dark_default12,
  dark_default13,
  dark_default14,
  dark_default15,
  dark_default16,
  dark_default17,
  dark_default18,
  dark_default19,
  dark_default2,
  dark_default20,
  dark_default21,
  dark_default22,
  dark_default23,
  dark_default24,
  dark_default25,
  dark_default26,
  dark_default27,
  dark_default28,
  dark_default29,
  dark_default3,
  dark_default30,
  dark_default31,
  dark_default32,
  dark_default33,
  dark_default34,
  dark_default35,
  dark_default36,
  dark_default37,
  dark_default38,
  dark_default39,
  dark_default4,
  dark_default40,
  dark_default41,
  dark_default42,
  dark_default43,
  dark_default44,
  dark_default45,
  dark_default46,
  dark_default47,
  dark_default48,
  dark_default49,
  dark_default5,
  dark_default50,
  dark_default51,
  dark_default52,
  dark_default53,
  dark_default54,
  dark_default55,
  dark_default56,
  dark_default57,
  dark_default58,
  dark_default59,
  dark_default6,
  dark_default60,
  dark_default61,
  dark_default62,
  dark_default63,
  dark_default64,
  dark_default65,
  dark_default66,
  dark_default67,
  dark_default68,
  dark_default69,
  dark_default7,
  dark_default70,
  dark_default71,
  dark_default72,
  dark_default73,
  dark_default74,
  dark_default75,
  dark_default76,
  dark_default77,
  dark_default78,
  dark_default79,
  dark_default8,
  dark_default80,
  dark_default9,
  dataTableProps,
  datePickerProps,
  deDE_default,
  deDE_default2,
  descriptionsItemProps,
  descriptionsProps,
  dialogProps,
  dialogProviderProps,
  dividerProps,
  drawerContentProps,
  drawerProps,
  dropdownProps,
  dynamicInputProps,
  dynamicInputRtl,
  dynamicTagsProps,
  elementProps,
  ellipsisProps,
  emptyProps,
  enGB_default,
  enGB_default2,
  enUS_default,
  enUS_default2,
  eo_default,
  eo_default2,
  equationProps,
  esAR_default,
  esAR_default2,
  formItemGiProps,
  formItemProps,
  formProps,
  frFR_default,
  frFR_default2,
  gradientTextProps,
  gridItemProps,
  gridProps,
  headerProps,
  headerProps2,
  hr_default,
  iconProps,
  iconWrapperProps,
  idID_default,
  idID_default2,
  imageDark,
  imageGroupProps,
  imageLight,
  imageProps,
  inputGroupLabelProps,
  inputGroupProps,
  inputNumberProps,
  inputNumberRtl,
  inputProps,
  inputRtl,
  install,
  itIT_default,
  itIT_default2,
  jaJP_default,
  jaJP_default2,
  koKR_default,
  koKR_default2,
  layoutFooterProps,
  layoutProps,
  layoutSiderProps,
  li_default,
  light_default,
  light_default10,
  light_default11,
  light_default12,
  light_default13,
  light_default14,
  light_default15,
  light_default16,
  light_default17,
  light_default18,
  light_default19,
  light_default2,
  light_default20,
  light_default21,
  light_default22,
  light_default23,
  light_default24,
  light_default25,
  light_default26,
  light_default27,
  light_default28,
  light_default29,
  light_default3,
  light_default30,
  light_default31,
  light_default32,
  light_default33,
  light_default34,
  light_default35,
  light_default36,
  light_default37,
  light_default38,
  light_default39,
  light_default4,
  light_default40,
  light_default41,
  light_default42,
  light_default43,
  light_default44,
  light_default45,
  light_default46,
  light_default47,
  light_default48,
  light_default49,
  light_default5,
  light_default50,
  light_default51,
  light_default52,
  light_default53,
  light_default54,
  light_default55,
  light_default56,
  light_default57,
  light_default58,
  light_default59,
  light_default6,
  light_default60,
  light_default61,
  light_default62,
  light_default63,
  light_default64,
  light_default65,
  light_default66,
  light_default67,
  light_default68,
  light_default69,
  light_default7,
  light_default70,
  light_default71,
  light_default72,
  light_default73,
  light_default74,
  light_default75,
  light_default76,
  light_default77,
  light_default78,
  light_default8,
  light_default9,
  listProps,
  listRtl,
  loadingBarProviderProps,
  lockHtmlScrollRightCompensationRef,
  logProps,
  mentionProps,
  menuProps,
  merge_default,
  messageProviderProps,
  messageRtl,
  modalProps,
  nbNO_default,
  nbNO_default2,
  nlNL_default,
  nlNL_default2,
  notificationProviderProps,
  notificationRtl,
  numberAnimationProps,
  olProps,
  ol_default,
  pProps,
  p_default,
  pageHeaderDark,
  pageHeaderLight,
  pageHeaderProps,
  paginationProps,
  paginationRtl,
  plPL_default,
  plPL_default2,
  popconfirmProps,
  popoverProps,
  popselectProps,
  preset_default,
  progressProps,
  ptBR_default,
  ptBR_default2,
  radioButtonProps,
  radioGroupProps,
  radioProps,
  radioRtl,
  rateProps,
  resultProps,
  rowProps,
  rowRtl,
  rtl_default,
  rtl_default2,
  rtl_default3,
  ruRU_default,
  ruRU_default2,
  scrollbarProps,
  selectProps,
  skSK_default,
  skSK_default2,
  skeletonDark,
  skeletonLight,
  skeletonProps,
  sliderProps,
  spaceProps,
  spaceRtl,
  spinProps,
  statisticProps,
  statisticRtl,
  stepProps,
  stepsProps,
  stepsRtl,
  switchProps,
  tabPaneProps,
  tabProps,
  tableProps,
  tableRtl,
  tabsProps,
  tagProps,
  tagRtl,
  textProps,
  text_default,
  thTH_default,
  thTH_default2,
  thingProps,
  thingRtl,
  timePickerProps,
  timeProps,
  timelineItemProps,
  timelineProps,
  tooltipProps,
  trTR_default,
  trTR_default2,
  transferProps,
  transferProps2,
  treeProps,
  treeRtl,
  treeSelectProps,
  ukUA_default,
  ukUA_default2,
  ulProps,
  ul_default,
  uploadProps,
  useDialog,
  useDialogReactiveList,
  useLoadingBar,
  useLocale,
  useMessage,
  useNotification,
  useOsTheme,
  version_default,
  viVN_default,
  viVN_default2,
  watermarkProps,
  zhCN_default,
  zhCN_default2,
  zhTW_default,
  zhTW_default2
} from "./chunk-HDKK4YN2.js";
import {
  Fragment,
  computed,
  defineComponent,
  h,
  inject,
  ref,
  toRaw,
  watch
} from "./chunk-IDMHQ7FM.js";
import "./chunk-4EOJPDL2.js";

// node_modules/naive-ui/es/composables/use-theme-vars.js
function useThemeVars() {
  const configProviderInjection = inject(configProviderInjectionKey, null);
  return computed(() => {
    if (configProviderInjection === null)
      return light_default;
    const { mergedThemeRef: { value: mergedTheme }, mergedThemeOverridesRef: { value: mergedThemeOverrides } } = configProviderInjection;
    const currentThemeVars = (mergedTheme === null || mergedTheme === void 0 ? void 0 : mergedTheme.common) || light_default;
    if (mergedThemeOverrides === null || mergedThemeOverrides === void 0 ? void 0 : mergedThemeOverrides.common) {
      return Object.assign({}, currentThemeVars, mergedThemeOverrides.common);
    } else {
      return currentThemeVars;
    }
  });
}

// node_modules/naive-ui/es/equation/styles/light.js
var self = () => ({});
var equationLight = {
  name: "Equation",
  common: light_default,
  self
};
var light_default79 = equationLight;

// node_modules/naive-ui/es/equation/styles/dark.js
var equationDark = {
  name: "Equation",
  common: dark_default,
  self
};
var dark_default81 = equationDark;

// node_modules/naive-ui/es/themes/dark.js
var darkTheme = {
  name: "dark",
  common: dark_default,
  Alert: dark_default8,
  Anchor: dark_default9,
  AutoComplete: dark_default11,
  Avatar: dark_default12,
  AvatarGroup: dark_default13,
  BackTop: dark_default14,
  Badge: dark_default15,
  Breadcrumb: dark_default16,
  Button: dark_default17,
  ButtonGroup: dark_default52,
  Calendar: dark_default18,
  Card: dark_default20,
  Carousel: dark_default21,
  Cascader: dark_default23,
  Checkbox: dark_default22,
  Code: dark_default24,
  Collapse: dark_default25,
  CollapseTransition: dark_default26,
  ColorPicker: dark_default19,
  DataTable: dark_default34,
  DatePicker: dark_default37,
  Descriptions: dark_default38,
  Dialog: dark_default39,
  Divider: dark_default41,
  Drawer: dark_default42,
  Dropdown: dark_default33,
  DynamicInput: dark_default43,
  DynamicTags: dark_default45,
  Element: dark_default46,
  Empty: dark_default2,
  Ellipsis: dark_default31,
  Equation: dark_default81,
  Form: dark_default47,
  GradientText: dark_default48,
  Icon: dark_default35,
  IconWrapper: dark_default49,
  Image: imageDark,
  Input: dark_default10,
  InputNumber: dark_default53,
  LegacyTransfer: dark_default80,
  Layout: dark_default54,
  List: dark_default55,
  LoadingBar: dark_default56,
  Log: dark_default57,
  Menu: dark_default59,
  Mention: dark_default58,
  Message: dark_default51,
  Modal: dark_default40,
  Notification: dark_default50,
  PageHeader: pageHeaderDark,
  Pagination: dark_default29,
  Popconfirm: dark_default60,
  Popover: dark_default5,
  Popselect: dark_default27,
  Progress: dark_default61,
  Radio: dark_default32,
  Rate: dark_default62,
  Result: dark_default63,
  Row: dark_default79,
  Scrollbar: dark_default3,
  Select: dark_default28,
  Skeleton: skeletonDark,
  Slider: dark_default64,
  Space: dark_default44,
  Spin: dark_default65,
  Statistic: dark_default66,
  Steps: dark_default67,
  Switch: dark_default68,
  Table: dark_default69,
  Tabs: dark_default70,
  Tag: dark_default6,
  Thing: dark_default71,
  TimePicker: dark_default36,
  Timeline: dark_default72,
  Tooltip: dark_default30,
  Transfer: dark_default73,
  Tree: dark_default74,
  TreeSelect: dark_default75,
  Typography: dark_default76,
  Upload: dark_default77,
  Watermark: dark_default78
};

// node_modules/naive-ui/es/themes/light.js
var lightTheme = {
  name: "light",
  common: light_default,
  Alert: light_default6,
  Anchor: light_default7,
  AutoComplete: light_default9,
  Avatar: light_default10,
  AvatarGroup: light_default11,
  BackTop: light_default12,
  Badge: light_default13,
  Breadcrumb: light_default14,
  Button: light_default15,
  ButtonGroup: light_default50,
  Calendar: light_default16,
  Card: light_default18,
  Carousel: light_default19,
  Cascader: light_default21,
  Checkbox: light_default20,
  Code: light_default22,
  Collapse: light_default23,
  CollapseTransition: light_default24,
  ColorPicker: light_default17,
  DataTable: light_default32,
  DatePicker: light_default35,
  Descriptions: light_default36,
  Dialog: light_default37,
  Divider: light_default39,
  Drawer: light_default40,
  Dropdown: light_default31,
  DynamicInput: light_default41,
  DynamicTags: light_default43,
  Element: light_default44,
  Empty: light_default2,
  Equation: light_default79,
  Ellipsis: light_default29,
  Form: light_default45,
  GradientText: light_default46,
  Icon: light_default33,
  IconWrapper: light_default47,
  Image: imageLight,
  Input: light_default8,
  InputNumber: light_default51,
  Layout: light_default52,
  LegacyTransfer: light_default78,
  List: light_default53,
  LoadingBar: light_default54,
  Log: light_default55,
  Menu: light_default57,
  Mention: light_default56,
  Message: light_default49,
  Modal: light_default38,
  Notification: light_default48,
  PageHeader: pageHeaderLight,
  Pagination: light_default27,
  Popconfirm: light_default58,
  Popover: light_default4,
  Popselect: light_default25,
  Progress: light_default59,
  Radio: light_default30,
  Rate: light_default60,
  Row: light_default77,
  Result: light_default61,
  Scrollbar: light_default3,
  Skeleton: skeletonLight,
  Select: light_default26,
  Slider: light_default62,
  Space: light_default42,
  Spin: light_default63,
  Statistic: light_default64,
  Steps: light_default65,
  Switch: light_default66,
  Table: light_default67,
  Tabs: light_default68,
  Tag: light_default5,
  Thing: light_default69,
  TimePicker: light_default34,
  Timeline: light_default70,
  Tooltip: light_default28,
  Transfer: light_default71,
  Tree: light_default72,
  TreeSelect: light_default73,
  Typography: light_default74,
  Upload: light_default75,
  Watermark: light_default76
};

// node_modules/naive-ui/es/themes/utils.js
function createTheme(name, componentThemes) {
  const nameIsString = typeof name === "string";
  const theme = {
    name: nameIsString ? name : "customized-theme"
  };
  if (nameIsString) {
    if (componentThemes) {
      for (const cTheme of componentThemes) {
        theme[cTheme.name] = cTheme;
      }
    }
  } else {
    for (const cTheme of name) {
      theme[cTheme.name] = cTheme;
    }
  }
  return theme;
}

// node_modules/naive-ui/es/theme-editor/src/MaximizeIcon.js
var MaximizeIcon = defineComponent({
  render() {
    return h(
      "svg",
      { xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 16 16" },
      h(
        "g",
        { fill: "none" },
        h("path", { d: "M8.5 2a.5.5 0 0 0 0 1h3.793L3 12.293V8.5a.5.5 0 0 0-1 0v4.9a.6.6 0 0 0 .6.6h4.9a.5.5 0 0 0 0-1H3.707L13 3.707V7.5a.5.5 0 0 0 1 0V2.6a.6.6 0 0 0-.6-.6H8.5z", fill: "currentColor" })
      )
    );
  }
});

// node_modules/naive-ui/es/theme-editor/src/MinimizeIcon.js
var MinimizeIcon = defineComponent({
  render() {
    return h(
      "svg",
      { xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 32 32" },
      h("path", { d: "M4 18v2h6.586L2 28.582L3.414 30L12 21.414V28h2V18H4z", fill: "currentColor" }),
      h("path", { d: "M30 3.416L28.592 2L20 10.586V4h-2v10h10v-2h-6.586L30 3.416z", fill: "currentColor" })
    );
  }
});

// node_modules/naive-ui/es/theme-editor/src/ThemeEditor.js
var ColorWandIcon = h(
  "svg",
  { viewBox: "0 0 16 16", fill: "none", xmlns: "http://www.w3.org/2000/svg", style: { width: "1em", height: "1em", color: "currentColor" } },
  h("path", { d: "M13.5 1C13.7761 1 14 1.22386 14 1.5V2H14.5C14.7761 2 15 2.22386 15 2.5C15 2.77614 14.7761 3 14.5 3H14V3.5C14 3.77614 13.7761 4 13.5 4C13.2239 4 13 3.77614 13 3.5V3H12.5C12.2239 3 12 2.77614 12 2.5C12 2.22386 12.2239 2 12.5 2H13V1.5C13 1.22386 13.2239 1 13.5 1Z", fill: "currentColor" }),
  h("path", { d: "M3.5 3C3.77615 3 4 3.22386 4 3.5V4H4.5C4.77615 4 5 4.22386 5 4.5C5 4.77614 4.77615 5 4.5 5H4V5.5C4 5.77614 3.77615 6 3.5 6C3.22386 6 3 5.77614 3 5.5V5H2.5C2.22386 5 2 4.77614 2 4.5C2 4.22386 2.22386 4 2.5 4H3V3.5C3 3.22386 3.22386 3 3.5 3Z", fill: "currentColor" }),
  h("path", { d: "M12.5 12C12.7761 12 13 11.7761 13 11.5C13 11.2239 12.7761 11 12.5 11H12V10.5C12 10.2239 11.7761 10 11.5 10C11.2239 10 11 10.2239 11 10.5V11H10.5C10.2239 11 10 11.2239 10 11.5C10 11.7761 10.2239 12 10.5 12H11V12.5C11 12.7761 11.2239 13 11.5 13C11.7761 13 12 12.7761 12 12.5V12H12.5Z", fill: "currentColor" }),
  h("path", { d: "M8.72956 4.56346C9.4771 3.81592 10.6891 3.81592 11.4367 4.56347C12.1842 5.31102 12.1842 6.52303 11.4367 7.27058L4.26679 14.4404C3.51924 15.1879 2.30723 15.1879 1.55968 14.4404C0.812134 13.6928 0.812138 12.4808 1.55969 11.7333L8.72956 4.56346ZM8.25002 6.4572L2.26679 12.4404C1.90977 12.7974 1.90977 13.3763 2.26679 13.7333C2.62381 14.0903 3.20266 14.0903 3.55968 13.7333L9.54292 7.75009L8.25002 6.4572ZM10.25 7.04299L10.7295 6.56347C11.0866 6.20645 11.0866 5.6276 10.7296 5.27057C10.3725 4.91355 9.79368 4.91355 9.43666 5.27057L8.95713 5.7501L10.25 7.04299Z", fill: "currentColor" })
);
var showColorPicker = (key) => {
  if (key.includes("pacity"))
    return false;
  if (key.includes("color") || key.includes("Color"))
    return true;
  return false;
};
var ThemeEditor_default = defineComponent({
  name: "ThemeEditor",
  inheritAttrs: false,
  setup() {
    const isMaximized = ref(false);
    const fileInputRef = ref(null);
    const NConfigProvider = inject(configProviderInjectionKey, null);
    const theme = computed(() => {
      var _a, _b, _c, _d;
      const mergedTheme = (NConfigProvider === null || NConfigProvider === void 0 ? void 0 : NConfigProvider.mergedThemeRef.value) || lightTheme;
      const mergedThemeOverrides = NConfigProvider === null || NConfigProvider === void 0 ? void 0 : NConfigProvider.mergedThemeOverridesRef.value;
      const common = merge_default({}, mergedTheme.common || lightTheme.common, mergedThemeOverrides === null || mergedThemeOverrides === void 0 ? void 0 : mergedThemeOverrides.common, overridesRef.value.common || {});
      const overrides = {
        common
      };
      for (const key of Object.keys(lightTheme)) {
        if (key === "common")
          continue;
        overrides[key] = ((_b = (_a = mergedTheme[key]) === null || _a === void 0 ? void 0 : _a.self) === null || _b === void 0 ? void 0 : _b.call(_a, common)) || ((_d = (_c = lightTheme[key]).self) === null || _d === void 0 ? void 0 : _d.call(_c, common));
        if (mergedThemeOverrides && overrides[key]) {
          merge_default(overrides[key], mergedThemeOverrides[key]);
        }
      }
      return overrides;
    });
    const themeCommonDefaultRef = computed(() => {
      var _a;
      return ((_a = NConfigProvider === null || NConfigProvider === void 0 ? void 0 : NConfigProvider.mergedThemeRef.value) === null || _a === void 0 ? void 0 : _a.common) || lightTheme.common;
    });
    const showPanelRef = ref(false);
    const overridesRef = ref(JSON.parse(localStorage["naive-ui-theme-overrides"] || "{}"));
    const tempOverridesRef = ref(JSON.parse(localStorage["naive-ui-theme-overrides"] || "{}"));
    const varNamePatternRef = ref("");
    const compNamePatternRef = ref("");
    const tempVarNamePatternRef = ref("");
    const tempCompNamePatternRef = ref("");
    function applyTempOverrides() {
      overridesRef.value = cloneDeep_default(toRaw(tempOverridesRef.value));
    }
    function setTempOverrides(compName, varName, value) {
      const { value: tempOverrides } = tempOverridesRef;
      if (!(compName in tempOverrides))
        tempOverrides[compName] = {};
      const compOverrides = tempOverrides[compName];
      if (value) {
        compOverrides[varName] = value;
      } else {
        delete compOverrides[varName];
      }
    }
    function handleClearAllClick() {
      tempOverridesRef.value = {};
      overridesRef.value = {};
    }
    function handleImportClick() {
      const { value: fileInput } = fileInputRef;
      if (!fileInput)
        return;
      fileInput.click();
    }
    function toggleMaximized() {
      isMaximized.value = !isMaximized.value;
    }
    function handleInputFileChange() {
      const { value: fileInput } = fileInputRef;
      if (!fileInput)
        return;
      const fileList = fileInput.files;
      const file = fileList === null || fileList === void 0 ? void 0 : fileList[0];
      if (!file)
        return;
      file.text().then((value) => {
        overridesRef.value = JSON.parse(value);
        tempOverridesRef.value = JSON.parse(value);
      }).catch((e) => {
        alert("Imported File is Invalid");
        console.error(e);
      }).finally(() => {
        fileInput.value = "";
      });
    }
    function handleExportClick() {
      const url = URL.createObjectURL(new Blob([JSON.stringify(overridesRef.value, void 0, 2)]));
      const a = document.createElement("a");
      a.href = url;
      a.download = "naive-ui-theme-overrides.json";
      document.body.appendChild(a);
      a.click();
      document.body.removeChild(a);
      URL.revokeObjectURL(url);
    }
    watch(overridesRef, (value) => {
      localStorage["naive-ui-theme-overrides"] = JSON.stringify(value);
    });
    return {
      locale: useLocale("ThemeEditor").localeRef,
      themeCommonDefault: themeCommonDefaultRef,
      theme,
      showPanel: showPanelRef,
      tempOverrides: tempOverridesRef,
      overrides: overridesRef,
      compNamePattern: compNamePatternRef,
      tempCompNamePattern: tempCompNamePatternRef,
      varNamePattern: varNamePatternRef,
      tempVarNamePattern: tempVarNamePatternRef,
      fileInputRef,
      applyTempOverrides,
      setTempOverrides,
      handleClearAllClick,
      handleExportClick,
      handleImportClick,
      handleInputFileChange,
      toggleMaximized,
      isMaximized
    };
  },
  render() {
    return h(ConfigProvider_default, { themeOverrides: this.overrides }, {
      default: () => {
        var _a, _b;
        return [
          h(Popover_default, { scrollable: true, arrowPointToCenter: true, trigger: "manual", show: this.showPanel, displayDirective: "show", placement: "top-end", style: {
            width: this.isMaximized ? "calc(100vw - 80px)" : "288px",
            height: "calc(100vh - 200px)",
            padding: 0
          } }, {
            trigger: () => h(Element_default, {
              style: [
                {
                  position: "fixed",
                  zIndex: 10,
                  bottom: "40px",
                  right: `calc(40px + ${lockHtmlScrollRightCompensationRef.value})`,
                  width: "44px",
                  height: "44px",
                  fontSize: "26px",
                  display: "flex",
                  alignItems: "center",
                  justifyContent: "center",
                  borderRadius: "50%",
                  backgroundColor: "var(--popover-color)",
                  color: "var(--text-color-2)",
                  transition: "color .3s var(--cubic-bezier-ease-in-out), background-color .3s var(--cubic-bezier-ease-in-out), box-shadow .3s var(--cubic-bezier-ease-in-out)",
                  boxShadow: "0 2px 8px 0px rgba(0, 0, 0, .12)",
                  cursor: "pointer"
                },
                this.$attrs.style
              ],
              // We use ts-ignore for vue-tsc, since it seems to patch
              // native event for vue components
              // eslint-disable-next-line @typescript-eslint/prefer-ts-expect-error
              // @ts-ignore
              onClick: () => {
                this.showPanel = !this.showPanel;
              }
            }, { default: () => ColorWandIcon }),
            default: () => h(
              Fragment,
              null,
              h("input", { type: "file", ref: "fileInputRef", style: {
                display: "block",
                width: 0,
                height: 0,
                visibility: "hidden"
              }, onChange: this.handleInputFileChange }),
              h(Space_default, { vertical: true }, {
                default: () => [
                  h(Space_default, { align: "center", justify: "space-between", style: {
                    marginBottom: "8px",
                    fontSize: "18px",
                    fontWeight: 500
                  } }, {
                    default: () => h(
                      Fragment,
                      null,
                      h("span", null, this.locale.title),
                      h(Button_default, { onClick: this.toggleMaximized, secondary: true, circle: true, size: "tiny" }, {
                        icon: () => h(NIcon, { component: this.isMaximized ? MinimizeIcon : MaximizeIcon })
                      })
                    )
                  }),
                  this.locale.filterCompName,
                  h(Input_default, { onChange: () => {
                    this.compNamePattern = this.tempCompNamePattern;
                  }, onInput: (value) => {
                    this.tempCompNamePattern = value;
                  }, value: this.tempCompNamePattern, placeholder: this.locale.filterCompName }),
                  this.locale.filterVarName,
                  h(Input_default, { onChange: (value) => {
                    this.varNamePattern = value;
                  }, onInput: (value) => {
                    this.tempVarNamePattern = value;
                  }, value: this.tempVarNamePattern, placeholder: this.locale.filterVarName }),
                  h(Button_default, { size: "small", onClick: () => {
                    this.compNamePattern = "";
                    this.varNamePattern = "";
                    this.tempCompNamePattern = "";
                    this.tempVarNamePattern = "";
                  }, block: true }, { default: () => this.locale.clearSearch }),
                  h(Button_default, { size: "small", onClick: this.handleClearAllClick, block: true }, {
                    default: () => this.locale.clearAllVars
                  }),
                  h(Space_default, { itemStyle: { flex: 1 } }, {
                    default: () => h(
                      Fragment,
                      null,
                      h(Button_default, { block: true, size: "small", onClick: this.handleImportClick }, {
                        default: () => this.locale.import
                      }),
                      h(Button_default, { block: true, size: "small", onClick: this.handleExportClick }, {
                        default: () => this.locale.export
                      })
                    )
                  })
                ]
              }),
              h(Divider_default, null),
              h(Collapse_default, null, {
                default: () => {
                  const { theme, compNamePattern, varNamePattern } = this;
                  const themeKeys = Object.keys(theme);
                  const compNamePatternLower = compNamePattern.toLowerCase();
                  const varNamePatternLower = varNamePattern.toLowerCase();
                  let filteredItemsCount = 0;
                  const collapsedItems = themeKeys.filter((themeKey) => {
                    return themeKey.toLowerCase().includes(compNamePatternLower);
                  }).map((themeKey) => {
                    const componentTheme = themeKey === "common" ? this.themeCommonDefault : theme[themeKey];
                    if (componentTheme === void 0) {
                      return null;
                    }
                    const varKeys = Object.keys(componentTheme).filter((key) => {
                      return key !== "name" && key.toLowerCase().includes(varNamePatternLower);
                    });
                    if (!varKeys.length) {
                      return null;
                    }
                    filteredItemsCount += 1;
                    return h(CollapseItem_default, { title: themeKey, name: themeKey }, {
                      default: () => h(Grid_default, { xGap: 32, yGap: 16, responsive: "screen", cols: this.isMaximized ? "1 xs:1 s:2 m:3 l:4" : 1 }, {
                        default: () => varKeys.map((varKey) => h(GridItem_default, null, {
                          default: () => {
                            var _a2, _b2, _c, _d;
                            return h(
                              Fragment,
                              null,
                              h("div", { key: `${varKey}Label`, style: {
                                wordBreak: "break-word"
                              } }, varKey),
                              showColorPicker(varKey) ? h(ColorPicker_default, { key: varKey, modes: ["rgb", "hex"], value: ((_b2 = (_a2 = this.tempOverrides) === null || _a2 === void 0 ? void 0 : _a2[themeKey]) === null || _b2 === void 0 ? void 0 : _b2[varKey]) || componentTheme[varKey], onComplete: this.applyTempOverrides, onUpdateValue: (value) => {
                                this.setTempOverrides(themeKey, varKey, value);
                              } }, {
                                action: () => {
                                  var _a3, _b3;
                                  return h(Button_default, { size: "small", disabled: componentTheme[varKey] === ((_b3 = (_a3 = this.tempOverrides) === null || _a3 === void 0 ? void 0 : _a3[themeKey]) === null || _b3 === void 0 ? void 0 : _b3[varKey]), onClick: () => {
                                    this.setTempOverrides(themeKey, varKey, componentTheme[varKey]);
                                    this.applyTempOverrides();
                                  } }, {
                                    default: () => this.locale.restore
                                  });
                                }
                              }) : h(Input_default, { key: varKey, onChange: this.applyTempOverrides, onUpdateValue: (value) => {
                                this.setTempOverrides(themeKey, varKey, value);
                              }, value: ((_d = (_c = this.tempOverrides) === null || _c === void 0 ? void 0 : _c[themeKey]) === null || _d === void 0 ? void 0 : _d[varKey]) || "", placeholder: componentTheme[varKey] })
                            );
                          }
                        }))
                      })
                    });
                  });
                  if (!filteredItemsCount)
                    return h(Empty_default, null);
                  return collapsedItems;
                }
              })
            )
          }),
          (_b = (_a = this.$slots).default) === null || _b === void 0 ? void 0 : _b.call(_a)
        ];
      }
    });
  }
});
export {
  a_default as NA,
  Affix_default as NAffix,
  Alert_default as NAlert,
  AnchorAdapter_default as NAnchor,
  Link_default as NAnchorLink,
  AutoComplete_default as NAutoComplete,
  Avatar_default as NAvatar,
  AvatarGroup_default as NAvatarGroup,
  BackTop_default as NBackTop,
  Badge_default as NBadge,
  blockquote_default as NBlockquote,
  Breadcrumb_default as NBreadcrumb,
  BreadcrumbItem_default as NBreadcrumbItem,
  Button_default as NButton,
  ButtonGroup_default as NButtonGroup,
  Calendar_default as NCalendar,
  Card_default as NCard,
  Carousel_default as NCarousel,
  CarouselItem_default as NCarouselItem,
  Cascader_default as NCascader,
  Checkbox_default as NCheckbox,
  CheckboxGroup_default as NCheckboxGroup,
  Code_default as NCode,
  Col_default as NCol,
  Collapse_default as NCollapse,
  CollapseItem_default as NCollapseItem,
  CollapseTransition_default as NCollapseTransition,
  ColorPicker_default as NColorPicker,
  ConfigProvider_default as NConfigProvider,
  Countdown_default as NCountdown,
  DataTable_default as NDataTable,
  DatePicker_default as NDatePicker,
  Descriptions_default as NDescriptions,
  DescriptionsItem_default as NDescriptionsItem,
  NDialog,
  NDialogProvider,
  Divider_default as NDivider,
  Drawer_default as NDrawer,
  DrawerContent_default as NDrawerContent,
  Dropdown_default as NDropdown,
  DynamicInput_default as NDynamicInput,
  DynamicTags_default as NDynamicTags,
  Element_default as NEl,
  Element_default as NElement,
  Ellipsis_default as NEllipsis,
  Empty_default as NEmpty,
  Equation as NEquation,
  Form_default as NForm,
  FormItem_default as NFormItem,
  FormItemCol_default as NFormItemCol,
  FormItemGridItem_default as NFormItemGi,
  FormItemGridItem_default as NFormItemGridItem,
  FormItemRow_default as NFormItemRow,
  GridItem_default as NGi,
  GlobalStyle_default as NGlobalStyle,
  GradientText_default as NGradientText,
  Grid_default as NGrid,
  GridItem_default as NGridItem,
  NH1,
  NH2,
  NH3,
  NH4,
  NH5,
  NH6,
  hr_default as NHr,
  NIcon,
  NIconWrapper,
  Image_default as NImage,
  ImageGroup_default as NImageGroup,
  Input_default as NInput,
  InputGroup_default as NInputGroup,
  InputGroupLabel_default as NInputGroupLabel,
  InputNumber_default as NInputNumber,
  Layout_default as NLayout,
  LayoutContent_default as NLayoutContent,
  LayoutFooter_default as NLayoutFooter,
  LayoutHeader_default as NLayoutHeader,
  LayoutSider_default as NLayoutSider,
  Transfer_default as NLegacyTransfer,
  li_default as NLi,
  List_default as NList,
  ListItem_default as NListItem,
  LoadingBarProvider_default as NLoadingBarProvider,
  Log_default as NLog,
  Mention_default as NMention,
  Menu_default as NMenu,
  MessageProvider_default as NMessageProvider,
  Modal_default as NModal,
  NotificationProvider_default as NNotificationProvider,
  NumberAnimation_default as NNumberAnimation,
  ol_default as NOl,
  p_default as NP,
  PageHeader_default as NPageHeader,
  Pagination_default as NPagination,
  Popconfirm_default as NPopconfirm,
  Popover_default as NPopover,
  Popselect_default as NPopselect,
  Progress_default as NProgress,
  Radio_default as NRadio,
  RadioButton_default as NRadioButton,
  RadioGroup_default as NRadioGroup,
  Rate_default as NRate,
  Result_default as NResult,
  Row_default as NRow,
  Scrollbar_default as NScrollbar,
  Select_default as NSelect,
  Skeleton_default as NSkeleton,
  Slider_default as NSlider,
  Space_default as NSpace,
  Spin_default as NSpin,
  Statistic_default as NStatistic,
  Step_default as NStep,
  Steps_default as NSteps,
  Switch_default as NSwitch,
  Tab_default as NTab,
  TabPane_default as NTabPane,
  Table_default as NTable,
  Tabs_default as NTabs,
  Tag_default as NTag,
  Tbody_default as NTbody,
  Td_default as NTd,
  text_default as NText,
  Th_default as NTh,
  Thead_default as NThead,
  ThemeEditor_default as NThemeEditor,
  Thing_default as NThing,
  Time_default as NTime,
  TimePicker_default as NTimePicker,
  Timeline_default as NTimeline,
  TimelineItem_default as NTimelineItem,
  Tooltip_default as NTooltip,
  Tr_default as NTr,
  Transfer_default2 as NTransfer,
  Tree_default as NTree,
  TreeSelect_default as NTreeSelect,
  ul_default as NUl,
  Upload_default as NUpload,
  UploadDragger_default as NUploadDragger,
  UploadFileList_default as NUploadFileList,
  UploadTrigger_default as NUploadTrigger,
  Watermark_default as NWatermark,
  XButton as NxButton,
  aProps,
  affixProps,
  dark_default8 as alertDark,
  alertProps,
  dark_default9 as anchorDark,
  anchorLinkProps,
  anchorProps,
  arDZ_default as arDZ,
  dark_default11 as autoCompleteDark,
  autoCompleteProps,
  dark_default12 as avatarDark,
  avatarGroupProps,
  avatarProps,
  dark_default14 as backTopDark,
  backTopProps,
  dark_default15 as badgeDark,
  badgeProps,
  blockquoteProps,
  dark_default16 as breadcrumbDark,
  breadcrumbItemProps,
  breadcrumbProps,
  dark_default17 as buttonDark,
  dark_default52 as buttonGroupDark,
  buttonGroupProps,
  buttonProps,
  c,
  cB,
  cE,
  cM,
  cNotM,
  calendarProps,
  dark_default20 as cardDark,
  cardProps,
  carouselProps,
  dark_default23 as cascaderDark,
  cascaderProps,
  dark_default22 as checkboxDark,
  checkboxGroupProps,
  checkboxProps,
  dark_default24 as codeDark,
  codeProps,
  colProps,
  dark_default25 as collapseDark,
  collapseItemProps,
  collapseProps,
  collapseTransitionProps,
  colorPickerProps,
  dark_default as commonDark,
  light_default as commonLight,
  configProviderProps,
  countdownProps,
  create_default as create,
  createDiscreteApi,
  createLocale,
  createTheme,
  darkTheme,
  dark_default34 as dataTableDark,
  dataTableProps,
  arDZ_default2 as dateArDZ,
  deDE_default2 as dateDeDE,
  enGB_default2 as dateEnGB,
  enUS_default2 as dateEnUS,
  eo_default2 as dateEo,
  esAR_default2 as dateEsAR,
  frFR_default2 as dateFrFR,
  idID_default2 as dateIdID,
  itIT_default2 as dateItIT,
  jaJP_default2 as dateJaJP,
  koKR_default2 as dateKoKR,
  nbNO_default2 as dateNbNO,
  nlNL_default2 as dateNlNL,
  dark_default37 as datePickerDark,
  datePickerProps,
  plPL_default2 as datePlPL,
  ptBR_default2 as datePtBR,
  ruRU_default2 as dateRuRU,
  skSK_default2 as dateSkSK,
  thTH_default2 as dateThTH,
  trTR_default2 as dateTrTR,
  ukUA_default2 as dateUkUA,
  viVN_default2 as dateViVN,
  zhCN_default2 as dateZhCN,
  zhTW_default2 as dateZhTW,
  deDE_default as deDE,
  preset_default as default,
  dark_default38 as descriptionsDark,
  descriptionsItemProps,
  descriptionsProps,
  dark_default39 as dialogDark,
  dialogProps,
  dialogProviderProps,
  dark_default41 as dividerDark,
  dividerProps,
  drawerContentProps,
  dark_default42 as drawerDark,
  drawerProps,
  dark_default33 as dropdownDark,
  dropdownProps,
  dark_default43 as dynamicInputDark,
  dynamicInputProps,
  dark_default45 as dynamicTagsDark,
  dynamicTagsProps,
  dark_default46 as elementDark,
  elementProps,
  ellipsisProps,
  dark_default2 as emptyDark,
  emptyProps,
  enGB_default as enGB,
  enUS_default as enUS,
  eo_default as eo,
  equationProps,
  esAR_default as esAR,
  dark_default47 as formDark,
  formItemGiProps,
  formItemGiProps as formItemGridItemProps,
  formItemProps,
  formProps,
  frFR_default as frFR,
  gridItemProps as giProps,
  dark_default48 as gradientTextDark,
  gradientTextProps,
  gridItemProps,
  gridProps,
  headerProps2 as h1Props,
  headerProps2 as h2Props,
  headerProps2 as h3Props,
  headerProps2 as h4Props,
  headerProps2 as h5Props,
  headerProps2 as h6Props,
  dark_default35 as iconDark,
  iconProps,
  iconWrapperProps,
  idID_default as idID,
  imageGroupProps,
  imageProps,
  dark_default10 as inputDark,
  inputGroupLabelProps,
  inputGroupProps,
  dark_default53 as inputNumberDark,
  inputNumberProps,
  inputProps,
  install,
  dark_default4 as internalSelectMenuDark,
  dark_default7 as internalSelectionDark,
  itIT_default as itIT,
  jaJP_default as jaJP,
  koKR_default as koKR,
  layoutProps as layoutContentProps,
  dark_default54 as layoutDark,
  layoutFooterProps,
  headerProps as layoutHeaderProps,
  layoutProps,
  layoutSiderProps,
  transferProps as legacyTransferProps,
  lightTheme,
  dark_default55 as listDark,
  listProps,
  dark_default56 as loadingBarDark,
  loadingBarProviderProps,
  dark_default57 as logDark,
  logProps,
  dark_default58 as mentionDark,
  mentionProps,
  dark_default59 as menuDark,
  menuProps,
  dark_default51 as messageDark,
  messageProviderProps,
  dark_default40 as modalDark,
  modalProps,
  nbNO_default as nbNO,
  nlNL_default as nlNL,
  dark_default50 as notificationDark,
  notificationProviderProps,
  numberAnimationProps,
  olProps,
  pProps,
  pageHeaderProps,
  dark_default29 as paginationDark,
  paginationProps,
  plPL_default as plPL,
  dark_default60 as popconfirmDark,
  popconfirmProps,
  dark_default5 as popoverDark,
  popoverProps,
  dark_default27 as popselectDark,
  popselectProps,
  dark_default61 as progressDark,
  progressProps,
  ptBR_default as ptBR,
  radioButtonProps,
  dark_default32 as radioDark,
  radioGroupProps,
  radioProps,
  dark_default62 as rateDark,
  rateProps,
  dark_default63 as resultDark,
  resultProps,
  rowProps,
  ruRU_default as ruRU,
  dark_default3 as scrollbarDark,
  scrollbarProps,
  dark_default28 as selectDark,
  selectProps,
  skSK_default as skSK,
  skeletonProps,
  dark_default64 as sliderDark,
  sliderProps,
  dark_default44 as spaceDark,
  spaceProps,
  dark_default65 as spinDark,
  spinProps,
  dark_default66 as statisticDark,
  statisticProps,
  stepProps,
  dark_default67 as stepsDark,
  stepsProps,
  dark_default68 as switchDark,
  switchProps,
  tabPaneProps,
  tabProps,
  dark_default69 as tableDark,
  tableProps,
  dark_default70 as tabsDark,
  tabsProps,
  dark_default6 as tagDark,
  tagProps,
  textProps,
  thTH_default as thTH,
  dark_default71 as thingDark,
  thingProps,
  dark_default36 as timePickerDark,
  timePickerProps,
  timeProps,
  dark_default72 as timelineDark,
  timelineItemProps,
  timelineProps,
  dark_default30 as tooltipDark,
  tooltipProps,
  trTR_default as trTR,
  dark_default73 as transferDark,
  transferProps2 as transferProps,
  dark_default74 as treeDark,
  treeProps,
  dark_default75 as treeSelectDark,
  treeSelectProps,
  dark_default76 as typographyDark,
  ukUA_default as ukUA,
  ulProps,
  alertRtl as unstableAlertRtl,
  avatarGroupRtl as unstableAvatarGroupRtl,
  badgeRtl as unstableBadgeRtl,
  buttonGroupRtl as unstableButtonGroupRtl,
  buttonRtl as unstableButtonRtl,
  cardRtl as unstableCardRtl,
  checkboxRtl as unstableCheckboxRtl,
  collapseRtl as unstableCollapseRtl,
  collapseTransitionRtl as unstableCollapseTransitionRtl,
  rtl_default2 as unstableDrawerRtl,
  dynamicInputRtl as unstableDynamicInputRtl,
  inputNumberRtl as unstableInputNumberRtl,
  inputRtl as unstableInputRtl,
  listRtl as unstableListRtl,
  messageRtl as unstableMessageRtl,
  notificationRtl as unstableNotificationRtl,
  rtl_default3 as unstablePageHeaderRtl,
  paginationRtl as unstablePaginationRtl,
  radioRtl as unstableRadioRtl,
  rowRtl as unstableRowRtl,
  rtl_default as unstableScrollbarRtl,
  spaceRtl as unstableSpaceRtl,
  statisticRtl as unstableStatisticRtl,
  stepsRtl as unstableStepsRtl,
  tableRtl as unstableTableRtl,
  tagRtl as unstableTagRtl,
  thingRtl as unstableThingRtl,
  treeRtl as unstableTreeRtl,
  dark_default77 as uploadDark,
  uploadProps,
  useDialog,
  useDialogReactiveList,
  useLoadingBar,
  useMessage,
  useNotification,
  useOsTheme,
  useThemeVars,
  version_default as version,
  viVN_default as viVN,
  dark_default78 as watermarkDark,
  watermarkProps,
  zhCN_default as zhCN,
  zhTW_default as zhTW
};
//# sourceMappingURL=naive-ui.js.map
